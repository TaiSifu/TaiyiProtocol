import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import { ActorAttributes, SifusToken, ActorNames, Actors, ActorSocialIdentity, WorldConstants, WorldContractRoute, WorldRandom, WorldItems, WorldZones, WorldEvents, ActorTalents, ActorBornPlaces, ActorPrelifes, ActorLocations, ActorRelationship, Trigrams, TrigramsRender, SifusDescriptor, SifusSeeder, WorldYemings, AssetDaoli, WorldStorylines, ParameterizedStorylines, GlobalStoryRegistry, NameGenerator } from '../typechain';
import { BigNumberish, Contract as EthersContract } from 'ethers';
export declare const deployWorldContractRoute: (deployer: SignerWithAddress) => Promise<WorldContractRoute>;
export declare const deployWorldConstants: (deployer: SignerWithAddress) => Promise<WorldConstants>;
export declare const deployWorldYemings: (taiyiDAO: string, deployer: SignerWithAddress) => Promise<WorldYemings>;
export declare const deployActors: (taiyiDAO: string, mintStart: BigNumberish, coinContract: string, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<Actors>;
export declare const deployShejiTu: (name: string, desc: string, moduleID: BigNumberish, actors: Actors, locations: ActorLocations, zones: WorldZones, attributes: ActorAttributes, evts: WorldEvents, talents: ActorTalents, trigrams: Trigrams, random: WorldRandom, deployer: SignerWithAddress) => Promise<(string[] | import("../typechain").ShejiTu | import("../typechain").ShejiTuProxyAdmin | import("../typechain").ShejiTuProxy)[]>;
export declare const deployWorldRandom: (deployer: SignerWithAddress) => Promise<WorldRandom>;
export declare const deployActorAttributes: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorAttributes>;
export declare const deployAssetDaoli: (worldConst: WorldConstants, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<AssetDaoli>;
export declare const deployActorNames: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorNames>;
export declare const deployActorSocialIdentity: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorSocialIdentity>;
export declare const deployWorldItems: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<WorldItems>;
export declare const deployWorldZones: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<WorldZones>;
export declare const deployActorTalents: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorTalents>;
export declare const deployWorldEvents: (oneAgeVSecond: number, moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<WorldEvents>;
export declare const deployActorPrelifes: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorPrelifes>;
export declare const deployActorBornPlaces: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorBornPlaces>;
export declare const deployActorLocations: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorLocations>;
export declare const deployActorRelationship: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ActorRelationship>;
export declare const deployTrigrams: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<Trigrams>;
export declare const deployTrigramsRender: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<TrigramsRender>;
export declare const deploySifusToken: (route: WorldContractRoute, taiyiDAO: string, descriptor: string, seeder: string, deployer: SignerWithAddress) => Promise<SifusToken>;
export declare const deploySifusDescriptor: (deployer: SignerWithAddress) => Promise<SifusDescriptor>;
export declare const deploySifusSeeder: (deployer: SignerWithAddress) => Promise<SifusSeeder>;
export declare const populateDescriptor: (sifusDescriptor: SifusDescriptor) => Promise<void>;
export declare const deployWorldStorylines: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<WorldStorylines>;
export declare const deployParameterizedStorylines: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<ParameterizedStorylines>;
export declare const deployGlobalStoryRegistry: (moduleId: BigNumberish, route: WorldContractRoute, deployer: SignerWithAddress) => Promise<GlobalStoryRegistry>;
export declare const deployNameGenerator: (route: WorldContractRoute, deployer: SignerWithAddress) => Promise<NameGenerator>;
export type TaiyiContractName = 'SifusDescriptor' | 'SifusSeeder' | 'SifusToken' | 'WorldConstants' | 'WorldContractRoute' | 'Actors' | 'WorldRandom' | 'ActorNames' | 'WorldYemings' | 'WorldItems' | 'ActorSocialIdentity' | 'WorldZones' | 'AssetDaoli' | 'ActorAttributes' | 'ActorPrelifes' | 'ActorLocations' | 'Trigrams' | 'TrigramsRender' | 'NameGenerator';
export interface WorldContract {
    instance: EthersContract;
    constructorArguments?: (string | number)[];
    libraries?: () => Record<string, string>;
}
export declare const deployTaiyiWorld: (actorMintStart: BigNumberish, deployer: SignerWithAddress, operatorDAO: SignerWithAddress, verbose?: Boolean) => Promise<Record<TaiyiContractName, WorldContract>>;
