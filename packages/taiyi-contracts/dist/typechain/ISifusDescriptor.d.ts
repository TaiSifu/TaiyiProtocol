/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISifusDescriptorInterface extends ethers.utils.Interface {
  functions: {
    "addBackground(string)": FunctionFragment;
    "addColorToPalette(uint8,string)": FunctionFragment;
    "addManyBackgrounds(string[])": FunctionFragment;
    "addManyColorsToPalette(uint8,string[])": FunctionFragment;
    "addManyPart1s(bytes[])": FunctionFragment;
    "addManyPart2s(bytes[])": FunctionFragment;
    "addManyPart3s(bytes[])": FunctionFragment;
    "addManyPart4s(bytes[])": FunctionFragment;
    "addPart1(bytes)": FunctionFragment;
    "addPart2(bytes)": FunctionFragment;
    "addPart3(bytes)": FunctionFragment;
    "addPart4(bytes)": FunctionFragment;
    "arePartsLocked()": FunctionFragment;
    "backgroundCount()": FunctionFragment;
    "backgrounds(uint256)": FunctionFragment;
    "generateSVGImage(tuple)": FunctionFragment;
    "lockParts()": FunctionFragment;
    "palettes(uint8,uint256)": FunctionFragment;
    "part1Count()": FunctionFragment;
    "part1s(uint256)": FunctionFragment;
    "part2Count()": FunctionFragment;
    "part2s(uint256)": FunctionFragment;
    "part3Count()": FunctionFragment;
    "part3s(uint256)": FunctionFragment;
    "part4Count()": FunctionFragment;
    "part4s(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBackground",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addColorToPalette",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyBackgrounds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyColorsToPalette",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyPart1s",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyPart2s",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyPart3s",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addManyPart4s",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "addPart1", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "addPart2", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "addPart3", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "addPart4", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "arePartsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgroundCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backgrounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [
      {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "lockParts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "palettes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "part1Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "part1s",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "part2Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "part2s",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "part3Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "part3s",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "part4Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "part4s",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBackground",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addColorToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyBackgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyColorsToPalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyPart1s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyPart2s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyPart3s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyPart4s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPart1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPart2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPart3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPart4", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arePartsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgroundCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backgrounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockParts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "palettes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part1Count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part1s", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part2Count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part2s", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part3Count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part3s", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part4Count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "part4s", data: BytesLike): Result;

  events: {
    "PartsLocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartsLocked"): EventFragment;
}

export class ISifusDescriptor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISifusDescriptorInterface;

  functions: {
    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyPart1s(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyPart1s(bytes[])"(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyPart2s(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyPart2s(bytes[])"(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyPart3s(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyPart3s(bytes[])"(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManyPart4s(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addManyPart4s(bytes[])"(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPart1(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPart1(bytes)"(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPart2(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPart2(bytes)"(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPart3(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPart3(bytes)"(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPart4(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPart4(bytes)"(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    part1Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "part1Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    part1s(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "part1s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    part2Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "part2Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    part2s(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "part2s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    part3Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "part3Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    part3s(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "part3s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    part4Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "part4Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    part4s(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "part4s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addBackground(
    background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBackground(string)"(
    background: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addColorToPalette(
    paletteIndex: BigNumberish,
    color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addColorToPalette(uint8,string)"(
    paletteIndex: BigNumberish,
    color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyBackgrounds(
    backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyBackgrounds(string[])"(
    backgrounds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyColorsToPalette(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyColorsToPalette(uint8,string[])"(
    paletteIndex: BigNumberish,
    newColors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyPart1s(
    part1s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyPart1s(bytes[])"(
    part1s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyPart2s(
    part2s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyPart2s(bytes[])"(
    part2s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyPart3s(
    part3s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyPart3s(bytes[])"(
    part3s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManyPart4s(
    part4s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addManyPart4s(bytes[])"(
    part4s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPart1(
    part1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPart1(bytes)"(
    part1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPart2(
    part2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPart2(bytes)"(
    part2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPart3(
    part3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPart3(bytes)"(
    part3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPart4(
    part4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPart4(bytes)"(
    part4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arePartsLocked(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "arePartsLocked()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

  "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  backgrounds(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "backgrounds(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGImage(
    seed: {
      background: BigNumberish;
      part1: BigNumberish;
      part2: BigNumberish;
      part3: BigNumberish;
      part4: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "generateSVGImage(tuple)"(
    seed: {
      background: BigNumberish;
      part1: BigNumberish;
      part2: BigNumberish;
      part3: BigNumberish;
      part4: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  lockParts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockParts()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  palettes(
    paletteIndex: BigNumberish,
    colorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "palettes(uint8,uint256)"(
    paletteIndex: BigNumberish,
    colorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  part1Count(overrides?: CallOverrides): Promise<BigNumber>;

  "part1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  part1s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "part1s(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  part2Count(overrides?: CallOverrides): Promise<BigNumber>;

  "part2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  part2s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "part2s(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  part3Count(overrides?: CallOverrides): Promise<BigNumber>;

  "part3Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  part3s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "part3s(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  part4Count(overrides?: CallOverrides): Promise<BigNumber>;

  "part4Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  part4s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "part4s(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addBackground(background: string, overrides?: CallOverrides): Promise<void>;

    "addBackground(string)"(
      background: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyPart1s(
      part1s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyPart1s(bytes[])"(
      part1s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyPart2s(
      part2s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyPart2s(bytes[])"(
      part2s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyPart3s(
      part3s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyPart3s(bytes[])"(
      part3s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManyPart4s(
      part4s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addManyPart4s(bytes[])"(
      part4s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPart1(part1: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addPart1(bytes)"(
      part1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addPart2(part2: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addPart2(bytes)"(
      part2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addPart3(part3: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addPart3(bytes)"(
      part3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addPart4(part4: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addPart4(bytes)"(
      part4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    arePartsLocked(overrides?: CallOverrides): Promise<boolean>;

    "arePartsLocked()"(overrides?: CallOverrides): Promise<boolean>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    lockParts(overrides?: CallOverrides): Promise<void>;

    "lockParts()"(overrides?: CallOverrides): Promise<void>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    part1Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part1s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "part1s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    part2Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part2s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "part2s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    part3Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part3Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part3s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "part3s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    part4Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part4Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part4s(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "part4s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    PartsLocked(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyPart1s(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyPart1s(bytes[])"(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyPart2s(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyPart2s(bytes[])"(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyPart3s(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyPart3s(bytes[])"(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManyPart4s(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addManyPart4s(bytes[])"(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPart1(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPart1(bytes)"(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPart2(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPart2(bytes)"(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPart3(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPart3(bytes)"(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPart4(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPart4(bytes)"(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    backgroundCount(overrides?: CallOverrides): Promise<BigNumber>;

    "backgroundCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    part1Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part1s(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "part1s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    part2Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part2s(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "part2s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    part3Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part3Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part3s(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "part3s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    part4Count(overrides?: CallOverrides): Promise<BigNumber>;

    "part4Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    part4s(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "part4s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBackground(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBackground(string)"(
      background: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addColorToPalette(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addColorToPalette(uint8,string)"(
      paletteIndex: BigNumberish,
      color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyBackgrounds(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyBackgrounds(string[])"(
      backgrounds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyColorsToPalette(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyColorsToPalette(uint8,string[])"(
      paletteIndex: BigNumberish,
      newColors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyPart1s(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyPart1s(bytes[])"(
      part1s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyPart2s(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyPart2s(bytes[])"(
      part2s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyPart3s(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyPart3s(bytes[])"(
      part3s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManyPart4s(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addManyPart4s(bytes[])"(
      part4s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPart1(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPart1(bytes)"(
      part1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPart2(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPart2(bytes)"(
      part2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPart3(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPart3(bytes)"(
      part3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPart4(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPart4(bytes)"(
      part4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arePartsLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "arePartsLocked()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    backgroundCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "backgroundCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backgrounds(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "backgrounds(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGImage(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateSVGImage(tuple)"(
      seed: {
        background: BigNumberish;
        part1: BigNumberish;
        part2: BigNumberish;
        part3: BigNumberish;
        part4: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockParts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockParts()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    palettes(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "palettes(uint8,uint256)"(
      paletteIndex: BigNumberish,
      colorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    part1Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "part1Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    part1s(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "part1s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    part2Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "part2Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    part2s(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "part2s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    part3Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "part3Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    part3s(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "part3s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    part4Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "part4Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    part4s(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "part4s(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
