/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WorldRandomInterface extends ethers.utils.Interface {
  functions: {
    "_dn(uint256,uint256)": FunctionFragment;
    "class()": FunctionFragment;
    "d10(uint256)": FunctionFragment;
    "d100(uint256)": FunctionFragment;
    "d12(uint256)": FunctionFragment;
    "d20(uint256)": FunctionFragment;
    "d4(uint256)": FunctionFragment;
    "d6(uint256)": FunctionFragment;
    "d8(uint256)": FunctionFragment;
    "dn(uint256,uint256)": FunctionFragment;
    "index()": FunctionFragment;
    "moduleID()": FunctionFragment;
    "tokenJSON(uint256)": FunctionFragment;
    "tokenSVG(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_dn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "class", values?: undefined): string;
  encodeFunctionData(functionFragment: "d10", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d100", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d12", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d20", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d4", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d6", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "d8", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(functionFragment: "moduleID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenJSON",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSVG",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_dn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "class", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d10", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d100", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d12", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenJSON", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenSVG", data: BytesLike): Result;

  events: {};
}

export class WorldRandom extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WorldRandomInterface;

  functions: {
    _dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    class(overrides?: CallOverrides): Promise<[string]>;

    "class()"(overrides?: CallOverrides): Promise<[string]>;

    d10(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d10(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d100(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d100(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d12(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d12(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d20(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d20(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d4(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d4(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d6(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d6(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    d8(_actor: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "d8(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    index(overrides?: CallOverrides): Promise<[string]>;

    "index()"(overrides?: CallOverrides): Promise<[string]>;

    moduleID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "moduleID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenJSON(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "tokenJSON(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenSVG(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _endY: BigNumber }>;

    "tokenSVG(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _endY: BigNumber }>;
  };

  _dn(
    _actor: BigNumberish,
    _number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_dn(uint256,uint256)"(
    _actor: BigNumberish,
    _number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  class(overrides?: CallOverrides): Promise<string>;

  "class()"(overrides?: CallOverrides): Promise<string>;

  d10(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d10(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d100(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d100(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d12(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d12(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d20(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d20(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d4(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d4(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d6(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d6(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  d8(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "d8(uint256)"(
    _actor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dn(
    _actor: BigNumberish,
    _number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dn(uint256,uint256)"(
    _actor: BigNumberish,
    _number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  index(overrides?: CallOverrides): Promise<string>;

  "index()"(overrides?: CallOverrides): Promise<string>;

  moduleID(overrides?: CallOverrides): Promise<BigNumber>;

  "moduleID()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenJSON(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenJSON(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenSVG(
    arg0: BigNumberish,
    _startY: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _endY: BigNumber }>;

  "tokenSVG(uint256,uint256,uint256)"(
    arg0: BigNumberish,
    _startY: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _endY: BigNumber }>;

  callStatic: {
    _dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    class(overrides?: CallOverrides): Promise<string>;

    "class()"(overrides?: CallOverrides): Promise<string>;

    d10(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d10(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d100(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d100(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d12(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d12(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d20(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d20(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d4(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d4(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d6(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d6(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d8(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d8(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<string>;

    "index()"(overrides?: CallOverrides): Promise<string>;

    moduleID(overrides?: CallOverrides): Promise<BigNumber>;

    "moduleID()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenJSON(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenJSON(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenSVG(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _endY: BigNumber }>;

    "tokenSVG(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _endY: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    _dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    class(overrides?: CallOverrides): Promise<BigNumber>;

    "class()"(overrides?: CallOverrides): Promise<BigNumber>;

    d10(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d10(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d100(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d100(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d12(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d12(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d20(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d20(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d4(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d4(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d6(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d6(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    d8(_actor: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "d8(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    "index()"(overrides?: CallOverrides): Promise<BigNumber>;

    moduleID(overrides?: CallOverrides): Promise<BigNumber>;

    "moduleID()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenJSON(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenJSON(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSVG(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenSVG(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    class(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "class()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    d10(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d10(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d100(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d100(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d12(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d12(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d20(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d20(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d4(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d4(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d6(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d6(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    d8(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "d8(uint256)"(
      _actor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dn(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dn(uint256,uint256)"(
      _actor: BigNumberish,
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "index()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moduleID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenJSON(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenJSON(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSVG(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenSVG(uint256,uint256,uint256)"(
      arg0: BigNumberish,
      _startY: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
