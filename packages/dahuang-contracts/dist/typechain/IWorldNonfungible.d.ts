/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IWorldNonfungibleInterface extends ethers.utils.Interface {
  functions: {
    "approveActor(uint256,uint256,uint256)": FunctionFragment;
    "balanceOfActor(uint256)": FunctionFragment;
    "getApprovedActor(uint256)": FunctionFragment;
    "isApprovedForAllActor(uint256,uint256)": FunctionFragment;
    "ownerActorOf(uint256)": FunctionFragment;
    "safeTransferActor(uint256,uint256,uint256,bytes)": FunctionFragment;
    "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAllActor(uint256,uint256,bool)": FunctionFragment;
    "tokenOfActorByIndex(uint256,uint256)": FunctionFragment;
    "transferActor(uint256,uint256,uint256)": FunctionFragment;
    "transferFromActor(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveActor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfActor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedActor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAllActor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerActorOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferActor",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFromActor",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllActor",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfActorByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferActor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromActor",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAllActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerActorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFromActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfActorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferActor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromActor",
    data: BytesLike
  ): Result;

  events: {
    "NonfungibleApproval(uint256,uint256,uint256)": EventFragment;
    "NonfungibleApprovalForAll(uint256,uint256,bool)": EventFragment;
    "NonfungibleTransfer(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NonfungibleApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonfungibleApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonfungibleTransfer"): EventFragment;
}

export class IWorldNonfungible extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWorldNonfungibleInterface;

  functions: {
    approveActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfActor(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfActor(uint256)"(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApprovedActor(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getApprovedActor(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAllActor(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAllActor(uint256,uint256)"(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerActorOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ownerActorOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "safeTransferActor(uint256,uint256,uint256,bytes)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAllActor(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAllActor(uint256,uint256,bool)"(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOfActorByIndex(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfActorByIndex(uint256,uint256)"(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromActor(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveActor(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveActor(uint256,uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfActor(
    _owner: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfActor(uint256)"(
    _owner: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApprovedActor(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getApprovedActor(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAllActor(
    _owner: BigNumberish,
    _operator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAllActor(uint256,uint256)"(
    _owner: BigNumberish,
    _operator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerActorOf(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ownerActorOf(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "safeTransferActor(uint256,uint256,uint256,bytes)"(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferActor(uint256,uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)"(
    _executor: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFromActor(uint256,uint256,uint256,uint256)"(
    _executor: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAllActor(
    _from: BigNumberish,
    _operator: BigNumberish,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAllActor(uint256,uint256,bool)"(
    _from: BigNumberish,
    _operator: BigNumberish,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOfActorByIndex(
    _owner: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfActorByIndex(uint256,uint256)"(
    _owner: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferActor(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferActor(uint256,uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromActor(
    _executor: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFromActor(uint256,uint256,uint256,uint256)"(
    _executor: BigNumberish,
    _from: BigNumberish,
    _to: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfActor(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfActor(uint256)"(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedActor(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApprovedActor(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAllActor(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAllActor(uint256,uint256)"(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerActorOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerActorOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferActor(uint256,uint256,uint256,bytes)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllActor(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAllActor(uint256,uint256,bool)"(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOfActorByIndex(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfActorByIndex(uint256,uint256)"(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromActor(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NonfungibleApproval(
      owner: BigNumberish | null,
      approved: BigNumberish | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { owner: BigNumber; approved: BigNumber; tokenId: BigNumber }
    >;

    NonfungibleApprovalForAll(
      owner: BigNumberish | null,
      operator: BigNumberish | null,
      approved: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { owner: BigNumber; operator: BigNumber; approved: boolean }
    >;

    NonfungibleTransfer(
      from: BigNumberish | null,
      to: BigNumberish | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    approveActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfActor(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfActor(uint256)"(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedActor(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApprovedActor(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAllActor(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAllActor(uint256,uint256)"(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerActorOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerActorOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferActor(uint256,uint256,uint256,bytes)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAllActor(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAllActor(uint256,uint256,bool)"(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOfActorByIndex(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfActorByIndex(uint256,uint256)"(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromActor(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfActor(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfActor(uint256)"(
      _owner: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedActor(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApprovedActor(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAllActor(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAllActor(uint256,uint256)"(
      _owner: BigNumberish,
      _operator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerActorOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerActorOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferActor(uint256,uint256,uint256,bytes)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256,bytes)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAllActor(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAllActor(uint256,uint256,bool)"(
      _from: BigNumberish,
      _operator: BigNumberish,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOfActorByIndex(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfActorByIndex(uint256,uint256)"(
      _owner: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferActor(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferActor(uint256,uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromActor(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromActor(uint256,uint256,uint256,uint256)"(
      _executor: BigNumberish,
      _from: BigNumberish,
      _to: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
